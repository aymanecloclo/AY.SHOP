Étape 1 : Créer un projet Laravel
Si vous n'avez pas encore installé Laravel, vous pouvez le faire avec Composer. Ouvrez un terminal et exécutez la commande suivante :

bash
Copy code
composer create-project --prefer-dist laravel/laravel projet-laravel
Naviguez ensuite dans votre dossier de projet :

bash
Copy code
cd projet-laravel
Étape 2 : Configurer la base de données
Ouvrez le fichier .env à la racine de votre projet Laravel.
Modifiez les paramètres de connexion à votre base de données MySQL (ou autre) selon votre configuration locale. Par exemple :
plaintext
Copy code
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nom_de_votre_base_de_donnees
DB_USERNAME=utilisateur
DB_PASSWORD=mot_de_passe
Assurez-vous que la base de données existe dans votre serveur MySQL.

Étape 3 : Créer les migrations
1. Créer la table Categories :
Lancez la commande suivante pour créer une migration pour la table Categories :

bash
Copy code
php artisan make:migration create_categories_table --create=categories
Ouvrez ensuite le fichier de migration généré (database/migrations/xxxx_xx_xx_create_categories_table.php) et définissez la structure de la table :

php
Copy code
public function up()
{
    Schema::create('categories', function (Blueprint $table) {
        $table->id();
        $table->string('CategoryName')->unique();
        $table->text('Description')->nullable();
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('categories');
}
2. Créer la table Users :
bash
Copy code
php artisan make:migration create_users_table --create=users
Dans le fichier de migration (database/migrations/xxxx_xx_xx_create_users_table.php), définissez la structure de la table :

php
Copy code
public function up()
{
    Schema::create('users', function (Blueprint $table) {
        $table->id();
        $table->string('Auth0ID')->unique();
        $table->string('FullName');
        $table->string('Email')->unique();
        $table->enum('Role', ['Customer', 'Admin'])->default('Customer');
        $table->boolean('IsActive')->default(true);
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('users');
}
3. Créer la table Products :
bash
Copy code
php artisan make:migration create_products_table --create=products
Dans le fichier de migration, définissez la structure de la table Products :

php
Copy code
public function up()
{
    Schema::create('products', function (Blueprint $table) {
        $table->id();
        $table->string('ProductName');
        $table->text('Description')->nullable();
        $table->decimal('Price', 10, 2);
        $table->integer('Stock');
        $table->foreignId('CategoryID')->constrained()->onDelete('set null');
        $table->string('ImageURL')->nullable();
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('products');
}
4. Créer la table Orders :
bash
Copy code
php artisan make:migration create_orders_table --create=orders
Dans le fichier de migration, définissez la structure de la table Orders :

php
Copy code
public function up()
{
    Schema::create('orders', function (Blueprint $table) {
        $table->id();
        $table->foreignId('UserID')->constrained('users');
        $table->decimal('TotalAmount', 10, 2)->default(0);
        $table->enum('Status', ['Pending', 'Completed', 'Cancelled'])->default('Pending');
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('orders');
}
5. Créer la table OrderDetails :
bash
Copy code
php artisan make:migration create_order_details_table --create=order_details
Dans le fichier de migration, définissez la structure de la table OrderDetails :

php
Copy code
public function up()
{
    Schema::create('order_details', function (Blueprint $table) {
        $table->id();
        $table->foreignId('OrderID')->constrained()->onDelete('cascade');
        $table->foreignId('ProductID')->constrained('products');
        $table->integer('Quantity');
        $table->decimal('Price', 10, 2);
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('order_details');
}
6. Créer la table Payments :
bash
Copy code
php artisan make:migration create_payments_table --create=payments
Dans le fichier de migration, définissez la structure de la table Payments :

php
Copy code
public function up()
{
    Schema::create('payments', function (Blueprint $table) {
        $table->id();
        $table->foreignId('OrderID')->constrained('orders')->onDelete('cascade');
        $table->timestamp('PaymentDate')->default(DB::raw('CURRENT_TIMESTAMP'));
        $table->decimal('Amount', 10, 2);
        $table->enum('PaymentMethod', ['Credit Card', 'PayPal', 'Bank Transfer']);
        $table->enum('PaymentStatus', ['Pending', 'Completed', 'Failed'])->default('Pending');
        $table->timestamps();
    });
}

public function down()
{
    Schema::dropIfExists('payments');
}
Étape 4 : Exécuter les Migrations
Une fois toutes les migrations créées, vous pouvez exécuter la commande suivante pour appliquer ces migrations à votre base de données :

bash
Copy code
php artisan migrate
Étape 5 : Créer les Modèles Eloquent
Créez les modèles Eloquent pour chaque table afin de faciliter l'interaction avec la base de données.

Exemple pour le modèle Category :
bash
Copy code
php artisan make:model Category
Dans le fichier app/Models/Category.php :

php
Copy code
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    use HasFactory;

    protected $fillable = ['CategoryName', 'Description'];

    public function products()
    {
        return $this->hasMany(Product::class);
    }
}
Créez des modèles similaires pour les autres tables (User, Product, Order, etc.) en utilisant les relations appropriées.

Étape 6 : Création des Contrôleurs
Vous pouvez également créer des contrôleurs pour gérer la logique des commandes et des paiements.

bash
Copy code
php artisan make:controller OrderController
php artisan make:controller PaymentController
Dans ces contrôleurs, vous pouvez écrire la logique de création de commandes et de traitement des paiements en utilisant les modèles Eloquent.

Conclusion